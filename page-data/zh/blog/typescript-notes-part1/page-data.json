{"componentChunkName":"component---src-templates-blog-index-tsx","path":"/zh/blog/typescript-notes-part1","result":{"data":{"locales":{"edges":[{"node":{"ns":"frontpage","data":"{\"content\":\"２０２２這年，這個網站誕生了\\n因為想要有個地方紀錄自己的成長\\n於是開始製作這個部落格\\n這裡主要是紀錄學習筆記\\n以便日後有需要的話可以來回顧\\n裡面會放一些學習筆記與小作品\\n如果內容有什麼錯誤的\\n還望各位不吝指教\\n也歡迎留言分享與討論\\n希望你逛得開心\\n願原力與你同在 🖖 \",\"skip\":\"略過\",\"resume\":\"關於我\"}","language":"zh"}},{"node":{"ns":"index","data":"{\"about\":\"關於我\",\"change-log\":\"開發日誌\",\"comments\":\"評論\",\"home\":\"家\",\"blog\":\"文章\",\"project\":\"作品\",\"contact\":\"聯絡我\",\"contact-form-title\":\"歡迎留下任何你想說的話 🙏\",\"contact-form-name\":\"你的名稱\",\"contact-form-messages\":\"想說的話\",\"submit\":\"送出\",\"close\":\"關閉\",\"contact-form-success\":\"🎉 已成功送出 🎉\",\"contact-form-errors\":\"抱歉😿\\n好像有什麼出錯了\",\"found-nothing\":\"沒有找到文章...\",\"themeTitle\":\"主題模式\",\"dark\":\"深色\",\"light\":\"淺色\",\"languageTitle\":\"選擇語言\",\"zh\":\"中文\",\"en\":\"英文\",\"workInProgress\":\"努力產出中...\",\"image-source\":\"圖片來源 \",\"what\":\".dsadas..\"}","language":"zh"}},{"node":{"ns":"tags","data":"{\"filter-tags\":\"用標籤/標題篩選文章\",\"javascript\":\"javascript\",\"note\":\"筆記\",\"gatsby\":\"gatsby\",\"typescript\":\"typescript\",\"series\":\"系列\",\"style\":\"樣式\",\"gsap\":\"gsap\",\"animation\":\"動畫\",\"google-sheet\":\"Google試算表\",\"cloud-function\":\"Cloud Function\",\"slack\":\"slack\"}","language":"zh"}}]},"blog":{"frontmatter":{"title":"Typescript 學習筆記 Part1","date":"2022-11-22T04:15:42.679Z","image_cover":"https://play-lh.googleusercontent.com/xvFkUT9oVpIfZqig0cFdKe4uQb5lucYm8ODfb2MydJSYjUeA2VsKMo3bzvy6OdJl3Q","img_source":"google"},"html":"<h2>Typescript 筆記 Part 1</h2>\n<p><a href=\"https://www.typescript-training.com/course/fundamentals-v3\">來源</a>（1-7 章）</p>\n<h3>type inference（型別推論） &#x26; variable declaration</h3>\n<p>當我們在使用 let 宣告變數的時候，typescript 會自動給它加上一個判定型別\n如果是用 const 的話， 型別會等於變數的值\n如果在宣告變數的時候沒有賦值的話 會被判定為 any</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">5</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// a : number</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">b</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">6</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// b : 6</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">c</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// c : any</span></span></span></code></pre>\n<h3>Type annotation（型別註解）</h3>\n<p>我們也可以直接對變數賦予一個指定的型別： 這個行為就叫做型別註解</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 註解</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 如果你把a指定成數字，則會報錯</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">a</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">6</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//錯誤！訊息如下</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// =&gt; Type &#39;number&#39; is not assignable to type &#39;string&#39;</span></span></span></code></pre>\n<div class=\"separate_line\">...</div>\n<h3>Objects （物件型別）</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ObjectType</span><span class=\"mtk1\"> = {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">key1</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">key2</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">key3</span><span class=\"mtk1\">?: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">, </span><span class=\"mtk3\">// 如果非必要的型別可以用一個？放在後面</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 巢狀的物件型別</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">NestedObjectType</span><span class=\"mtk1\"> = {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  [</span><span class=\"mtk12\">key</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">]: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">k1</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">k2</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<h3>Array （陣列型別）</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ArrayType</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">string</span><span class=\"mtk1\">[]; </span><span class=\"mtk3\">// =&gt; [&quot;test&quot;,&quot;lol&quot;]</span></span></span></code></pre>\n<h3>Tuples （元祖型別）</h3>\n<p>這在 javascript 裡是沒有的\n他長得像陣列，但內容物的數量、順序和型別都是要用明確的給予</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">TupleType</span><span class=\"mtk1\"> = [</span><span class=\"mtk10\">number</span><span class=\"mtk1\">, </span><span class=\"mtk10\">string</span><span class=\"mtk1\">];</span></span></span></code></pre>\n<div class=\"separate_line\">...</div>\n<h3>Type checking （型別檢查）</h3>\n<p>typescript's 型別是靜態的\n區分動態與靜態的差別在於，前者在編譯的時候就會有錯誤，後者則是在執行時</p>\n<h3>Union and Intersection（聯集與交集）</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 聯集，用 | 符號表示，意義上來看像是 OR</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 型別是 string 或是 number</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">UnionType</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> | </span><span class=\"mtk10\">number</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 交集，用 &amp; 符號表示，就像是 AND</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 型別必須要有 {k1: string} 跟 {k2: number} 這兩個型別同時存在</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IntersectionType</span><span class=\"mtk1\"> = { </span><span class=\"mtk12\">k1</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> } &amp; { </span><span class=\"mtk12\">k2</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span><span class=\"mtk1\"> };</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 如果拿兩個基本型別來做聯集的話， 會得到 never 表示永遠不可能同時符合string 和 number</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">TwoPrimitiveType</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> &amp; </span><span class=\"mtk10\">number</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// =&gt; become never</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\">: </span><span class=\"mtk10\">TwoPrimitiveType</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">6</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// Type &#39;number&#39; is not assignable to type &#39;never&#39;.</span></span></span></code></pre>\n<div class=\"separate_line\">...</div>\n<h3>Type aliases and Interfaces （型別別名/介面）</h3>\n<ul>\n<li>Type aliases 型別別名\n基本上 上面的例子已經使用了一些\n就是用一個定名稱來定義型別\n可以更好閱讀 更方便管理檔案\n需要 \"=\" 符號</li>\n</ul>\n<p>用 \"&#x26;\" 的符號的話， 也可以與其他型別合在一起</p>\n<ul>\n<li>Interface （介面）\n另一種方式定義型別的名字\n基北上用來定義物件型別\n我覺得更像是 class 這種物件的感覺</li>\n</ul>\n<p>可以使用繼承： \"extends\" 或 \"implements\"\n兩者也可以同時使用！</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//type</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">TheType</span><span class=\"mtk1\"> = {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">key</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// also can use</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">StringType</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">string</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//interface</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">InterfaceType</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">key</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>筆記:</p>\n<ol>\n<li>型別別名不能做兩次的宣告，不過介面可以\n型別介面的宣告會全部合併在一起</li>\n<li>如果要定義非物件型別的話，用 type alias</li>\n<li>如果需要讓別人可以複寫，或是更客製化的調整型別，用 interface</li>\n</ol>\n<div class=\"separate_line\">...</div>\n<p>目前為止是<a href=\"https://www.typescript-training.com/course/fundamentals-v3\">這裡</a>來的資料\n我覺得算是對基本了解 typescript 很有幫助\n記錄一些筆記 幫助自己記憶\n如果有哪裡有錯誤 還望不吝指教 🙏</p>\n<p>以上是今天的分享 👋</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>"}},"pageContext":{"language":"zh","name":"typescript-notes-part1","i18n":{"language":"zh","languages":["en","zh"],"defaultLanguage":"en","generateDefaultLanguagePage":false,"routed":true,"originalPath":"/blog/typescript-notes-part1","path":"zh/blog/typescript-notes-part1"}}},"staticQueryHashes":["3764592887"]}