{"componentChunkName":"component---src-templates-blog-index-tsx","path":"/blog/typescript-notes-part1","result":{"data":{"locales":{"edges":[{"node":{"ns":"frontpage","data":"{\"content\":\"In ÔºíÔºêÔºíÔºíÔºåthis page was born\\nI want a place to record my progress\\nSo, I started to build this blog\\nIn here, I'll write down what I learned\\nIn case I need some recap\\nYou will see what I've learned \\nand what I've built\\nIf there's any mistakes or misunderstanding\\n Please, has no hesitate to tell me\\nHope you enjoy it! Have a nice day \\nüëã \",\"skip\":\"SKIP\",\"resume\":\"Resume\"}","language":"en"}},{"node":{"ns":"index","data":"{\"about\":\"About\",\"change-log\":\"Change Log\",\"comments\":\"comments\",\"home\":\"home\",\"blog\":\"Blog\",\"project\":\"Project\",\"contact\":\"Contact\",\"contact-form-title\":\"Any feedback is welcome üôè\",\"contact-form-name\":\"Your Name\",\"contact-form-messages\":\"Anything You Want To Say\",\"submit\":\"Submit\",\"close\":\"Close\",\"contact-form-success\":\"üéâ submit successed üéâ\",\"contact-form-errors\":\"sorryüòø\\nsomething's worng\",\"found-nothing\":\"nothing found...\",\"themeTitle\":\"Theme Mode\",\"dark\":\"dark\",\"light\":\"light\",\"languageTitle\":\"Language\",\"zh\":\"zh\",\"en\":\"en\",\"workInProgress\":\"Work In Progress\",\"image-source\":\"the image is from \",\"tags\":{\"name\":\"NAME\",\"what\":\"...\"}}","language":"en"}},{"node":{"ns":"tags","data":"{\"filter-tags\":\"find the post by title/tags\",\"javascript\":\"javascript\",\"note\":\"note\",\"gatsby\":\"gatsby\",\"typescript\":\"typescript\",\"series\":\"series\",\"style\":\"style\",\"gsap\":\"gsap\",\"animation\":\"animation\"}","language":"en"}}]},"blog":{"frontmatter":{"title":"Typescript Notes Part 1","date":"2022-11-22T04:15:42.677Z","image_cover":"https://play-lh.googleusercontent.com/xvFkUT9oVpIfZqig0cFdKe4uQb5lucYm8ODfb2MydJSYjUeA2VsKMo3bzvy6OdJl3Q","img_source":"google"},"html":"<h2>Typescript Notes Part 1</h2>\n<p><a href=\"https://www.typescript-training.com/course/fundamentals-v3\">source</a>\nfrom 01-07</p>\n<h3>type inference &#x26; variable declaration</h3>\n<p>when use let to declare variable, it will be inferred by typescript\nand with const, type will be exactly what you assign\nand if not assign any value, tpye will be inferred as any</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">5</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// a : number</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">b</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">6</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// b : 6</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">c</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// c : any</span></span></span></code></pre>\n<h3>Type annotation</h3>\n<p>We can add specific type to variable when declaration</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// annotation</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// if you set a to number, it will throw an error</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">a</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">6</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//ERROR</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// =&gt; Type &#39;number&#39; is not assignable to type &#39;string&#39;</span></span></span></code></pre>\n<div class=\"separate-line\">...</div>\n<h3>Objects</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ObjectType</span><span class=\"mtk1\"> = {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">key1</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">key2</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">key3</span><span class=\"mtk1\">?: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">, </span><span class=\"mtk3\">// this one is optional with &quot;?&quot; operator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// nested Object type</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">NestedObjectType</span><span class=\"mtk1\"> = {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  [</span><span class=\"mtk12\">key</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">]: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">k1</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">k2</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<h3>Array</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ArrayType</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">string</span><span class=\"mtk1\">[]; </span><span class=\"mtk3\">// =&gt; [&quot;test&quot;,&quot;lol&quot;]</span></span></span></code></pre>\n<h3>Tuples</h3>\n<p>this is not in javascript,<br>\nIt need an explicitly type and order in array</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">TupleType</span><span class=\"mtk1\"> = [</span><span class=\"mtk10\">number</span><span class=\"mtk1\">, </span><span class=\"mtk10\">string</span><span class=\"mtk1\">];</span></span></span></code></pre>\n<div class=\"separate-line\">...</div>\n<h3>Type checking</h3>\n<p>typescript's type system is static<br>\nthe difference between static and dynamic is type-checking is perfomed at compile time or runtime</p>\n<h3>Union and Intersection</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Union with &quot;|&quot; ,like OR</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">UnionType</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> | </span><span class=\"mtk10\">number</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// intersection with &quot;&amp;&quot;, like AND</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IntersectionType</span><span class=\"mtk1\"> = { </span><span class=\"mtk12\">k1</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> } &amp; { </span><span class=\"mtk12\">k2</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span><span class=\"mtk1\"> };</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// if you try to use intersection with two primitive types, you will get error</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">TwoPrimitiveType</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> &amp; </span><span class=\"mtk10\">number</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// =&gt; become never</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\">: </span><span class=\"mtk10\">TwoPrimitiveType</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">6</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// Type &#39;number&#39; is not assignable to type &#39;never&#39;.</span></span></span></code></pre>\n<div class=\"separate-line\">...</div>\n<h3>Type aliases and Interfaces</h3>\n<ul>\n<li>\n<p>Type alias\nbasically it's what I did above<br>\nlike declaration of type<br>\neasier to read, import and export<br>\nneed \"=\" operator</p>\n<p>inheritance in type: use \"&#x26;\"</p>\n</li>\n<li>\n<p>Interface<br>\nIt can use to define an object type<br>\nIt's more like a class, no need \"=\" operator</p>\n<p>inheritance in interface: use \"extends\" | \"implements\"<br>\n\"extends\" and \"implements\" can use together at same time</p>\n</li>\n</ul>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//type</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">TheType</span><span class=\"mtk1\"> = {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">key</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// also can use</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">StringType</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">string</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//interface</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">InterfaceType</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">key</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>note that:</p>\n<ol>\n<li>type alias can not do a second declaration, while interface can<br>\nin interfaces, it will merge all the declaration together</li>\n<li>If you need to define something other than object type, use type alias</li>\n<li>If you want other people can customized types, use interfaces</li>\n</ol>\n<div class=\"separate-line\">...</div>\n<p>so far is part one from <a href=\"https://www.typescript-training.com/course/fundamentals-v3\">source</a><br>\nI think this is very helpful to learn typescript<br>\nI take this notes to help me memorize these knowledge<br>\nIf there are any wrong, please without hesitation to tell me üôè</p>\n<p>this is today's sharing üëã</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>"}},"pageContext":{"language":"en","name":"typescript-notes-part1","i18n":{"language":"en","languages":["en","zh"],"defaultLanguage":"en","generateDefaultLanguagePage":false,"routed":false,"originalPath":"/blog/typescript-notes-part1","path":"/blog/typescript-notes-part1"}}},"staticQueryHashes":["3764592887"]}