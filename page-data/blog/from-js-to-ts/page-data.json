{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-path-tsx","path":"/blog/from-js-to-ts/","result":{"data":{"markdownRemark":{"html":"<h1>從 js 到 ts</h1>\n<p>今天先稍微說一下最近做的改變<br>\n原本最開始這個部落格 是用 js 寫的<br>\n然後最近剛好在公司有討論到 js 與 ts 的好壞差別<br>\n所以我就打算來做一次<br>\n從 js 到 ts 的過程</p>\n<p>其實之前參加六角的前端時光屋的時候<br>\n也有用 ts 做過一份專案了<br>\n當時覺得 好難用ＸＤ 綁手綁腳的感覺<br>\n因為一直噴錯 一片紅 😢</p>\n<p>但這次在轉換的過程中<br>\n其實沒有我想的那麼麻煩了<br>\n反而有時後覺得 有被提醒到哪邊可能出錯了<br>\n覺得滿好的</p>\n<p>但在轉換的過程中還是時不時噴一些錯<br>\n以下就分享一下 可能會犯的錯ＸＤ</p>\n<ul>\n<li><code>Type '{}' is missing the following properties from type </code></li>\n</ul>\n<p>如果在 prop 裡面沒有設定可以不給這個參數的時候<br>\n會出現這個錯誤訊息<br>\n指的是 你沒有放著這個參數在 propType 裡面<br>\n解決辦法當然就是記得放 prop<br>\n但如果是不一定要放的 prop<br>\n可以在宣告 type 的時候加上一個?</p>\n<pre class=\"grvsc-container abyss\" data-language=\"js\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15 mtki\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">TYPE</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  prop_necessary</span><span class=\"mtk7\">:</span><span class=\"mtk1\"> </span><span class=\"mtk15 mtki\">string</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  prop_unnecessary</span><span class=\"mtk7\">?:</span><span class=\"mtk1\"> </span><span class=\"mtk15 mtki\">string</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<ul>\n<li><code>cannot be used as a JSX component. Its return type 'ReactNode' is not a valid JSX element. Type 'undefined' is not assignable to type 'Element | null'.</code></li>\n</ul>\n<p>這是在 render jsx(tsx)的時候<br>\n如果沒有正確的放 return 裡面的東西會噴的錯<br>\n例如我這樣寫的 :</p>\n<pre class=\"grvsc-container abyss\" data-language=\"js\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// some Component</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//  type from prop</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15 mtki\">const</span><span class=\"mtk1\"> renderPage </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  type1: &lt;&gt;render this page1&lt;/&gt;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  type2: &lt;&gt;render this page2&lt;/&gt;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">return</span><span class=\"mtk1\"> renderPage[type];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 但應該要這樣寫</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">return</span><span class=\"mtk1\"> &lt;&gt;{renderPage[type]}&lt;/&gt;;</span></span></span></code></pre>\n<p>一樣可以使用 enum 的方式來產不同類型的頁面<br>\n但需要在最外面加上一層包起來</p>\n<p>其實大多數的問題都可以用錯誤訊息來找到解法<br>\n所以也不用太擔心沒辦法寫好 🤷‍♂️<br>\n跟上次的專案比起來<br>\n這次的 ts 之路好像沒那麼困難了<br>\n很開心算是完成了一次 js to ts<br>\n\\繼續努力/</p>\n<p>以上是今天的分享 👋</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .abyss { background-color: #000c18; }\n  .abyss .mtku {\n    text-decoration: underline;\n    text-underline-position: under;\n  }\n  .abyss .mtki { font-style: italic; }\n  .abyss .mtk15 { color: #9966B8; }\n  .abyss .mtk1 { color: #6688CC; }\n  .abyss .mtk5 { color: #FFEEBB; }\n  .abyss .mtk7 { color: #225588; }\n  .abyss .mtk3 { color: #384887; }\n  .abyss .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"date":"September 23, 2022","path":"/blog/from-js-to-ts","title":"","type":"blog","image_cover":"https://images.unsplash.com/photo-1579468118864-1b9ea3c0db4a?fit=crop&w=1000&q=80"}}},"pageContext":{"id":"208f351d-a0cb-51d0-b91f-4ee012e3ec30","frontmatter__path":"/blog/from-js-to-ts","__params":{"frontmatter__path":"blog"}}},"staticQueryHashes":["3764592887"]}