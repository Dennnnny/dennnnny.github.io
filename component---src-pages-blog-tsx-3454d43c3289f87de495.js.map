{"version":3,"file":"component---src-pages-blog-tsx-3454d43c3289f87de495.js","mappings":"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","sources":["webpack://Dennnnny.io/./src/components/Container/seoContainer.tsx","webpack://Dennnnny.io/./src/tool/useSiteMetadata.ts","webpack://Dennnnny.io/./src/components/Post/EmptyPost.tsx","webpack://Dennnnny.io/./src/components/Tag/Tag.tsx","webpack://Dennnnny.io/./src/components/Post/index.tsx","webpack://Dennnnny.io/./src/components/PostList/index.tsx","webpack://Dennnnny.io/./src/tool/useDebounce.ts","webpack://Dennnnny.io/./src/components/page/Blog/index.tsx","webpack://Dennnnny.io/./src/pages/blog.tsx","webpack://Dennnnny.io/./src/state/index.ts","webpack://Dennnnny.io/./src/tool/functions.tsx"],"sourcesContent":["import React from \"react\";\nimport { useSiteMetadata } from \"@tool/useSiteMetadata\";\nimport { capitalizeFirstLetter } from \"@tool/functions\";\n\ntype SeoContainerType = {\n  title?: string;\n  description?: string;\n  pathname?: string;\n  subtitle?: string | null;\n  children?: React.ReactNode;\n};\n\nexport const SeoContainer = ({\n  title,\n  description,\n  pathname,\n  subtitle = null,\n  children,\n}: SeoContainerType) => {\n  const {\n    title: defaultTitle,\n    description: defaultDescription,\n    siteUrl,\n  } = useSiteMetadata();\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    // twitterUsername,\n  };\n\n  const seoTitle = subtitle\n    ? `${seo.title} | ${capitalizeFirstLetter(subtitle)}`\n    : seo.title;\n\n  return (\n    <>\n      <title>{seoTitle}</title>\n      <meta name=\"description\" content={seo.description} />\n      {/* <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:creator\" content={seo.twitterUsername} /> */}\n      <link\n        rel=\"icon\"\n        href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='0.9em' font-size='90'>☀️</text></svg>\"\n      />\n      {children}\n    </>\n  );\n};\n","import { graphql, useStaticQuery } from \"gatsby\";\n\nexport const useSiteMetadata = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          siteUrl\n        }\n      }\n    }\n  `);\n\n  return data.site.siteMetadata;\n};\n","import { device } from \"@layouts/styleConfig\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { useTranslation } from \"gatsby-plugin-react-i18next\";\n\nconst EmptyLayout = styled.div.withConfig({ componentId: \"EmptyLayout\" })`\n  grid-column: 1/-1;\n  min-height: calc(100vh - 40px - 64px);\n  box-sizing: border-box;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  @media ${device.tablet} {\n    min-height: calc(100vh - 70px - 64px);\n  }\n`;\n\nexport default function EmptyPost() {\n  const { t } = useTranslation();\n  return (\n    <EmptyLayout>\n      <p> {t(\"found-nothing\")}</p>\n    </EmptyLayout>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst TagLayout = styled.span`\n  border: 1px solid ${({ theme }) => theme.postColor};\n  margin: 4px;\n  box-sizing: border-box;\n  border-radius: 8px;\n  padding: 0 4px;\n`;\n\ntype TagType = {\n  content: string | (string | JSX.Element)[];\n};\n\nexport default function Tag({ content }: TagType) {\n  return <TagLayout>{content}</TagLayout>;\n}\n","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\nimport { colors, device } from \"@layouts/styleConfig\";\nimport { MdFrontMatter } from \"@tool/types\";\nimport { useTranslation } from \"gatsby-plugin-react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport { transformTextToHighlight } from \"@tool/functions\";\nimport Tag from \"@components/Tag/Tag\";\nimport { inputValueState } from \"@state/index\";\n\ntype PostType = {\n  data: MdFrontMatter;\n  searchKey?: string;\n};\n\ntype layoutPropType = {\n  [key: string]: string;\n};\n\nconst Layout = styled.div.withConfig({\n  componentId: \"Post_Layout\",\n})`\n  background-color: transparent;\n\n  grid-column: span 4 / span 4;\n  margin: 1rem 1.5rem;\n  padding-bottom: 8px;\n  border-bottom: 1px solid ${colors.lightWhite};\n\n  transition-delay: 800;\n\n  a {\n    text-decoration: none;\n    /* color: ${colors.white}; */\n    width: 100%;\n    transition: 0.3s;\n\n    :hover {\n      & .date,\n      .post_title {\n        color: ${({ theme }) => theme.hoverColor};\n      }\n      .post_tags {\n        color: ${({ theme }) => theme.hoverColor};\n        span {\n          border-color: ${({ theme }) => theme.hoverColor};\n        }\n      }\n    }\n  }\n\n  div.img_container {\n    border-radius: 12px;\n    overflow: hidden;\n    width: 100%;\n    height: 150px;\n  }\n\n  img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    position: relative;\n    transition: 0.3s;\n    opacity: ${({ theme }) => theme.opacity};\n  }\n\n  .date {\n    margin-top: 8px;\n    font-size: 16px;\n    color: ${({ theme }) => theme.postColor};\n    transition: 0.3s;\n  }\n\n  .post_title {\n    margin-top: 4px;\n    font-size: 20px;\n    font-weight: 700;\n    color: ${({ theme }) => theme.postColor};\n    overflow-wrap: break-word;\n    transition: 0.3s;\n  }\n\n  .post_tags {\n    margin-top: 4px;\n    color: ${({ theme }) => theme.postColor};\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  span.highlight {\n    background-color: ${colors.highlight};\n    color: ${colors.black};\n  }\n\n  @media ${device.tablet} {\n    padding-bottom: 0;\n    border-bottom: none;\n\n    :hover {\n      img {\n        transform: scale(1.1);\n        opacity: ${({ theme }) => theme.hoverOpacity};\n      }\n    }\n\n    div.img_container {\n      height: 200px;\n    }\n\n    .date {\n      margin-top: 8px;\n      font-size: 18px;\n    }\n\n    .post_title {\n      font-size: 26px;\n    }\n  }\n\n  @media ${device.laptop} {\n    div.img_container {\n      height: 250px;\n    }\n\n    .date {\n      margin-top: 8px;\n      font-size: 20px;\n    }\n\n    .post_title {\n      font-size: 30px;\n    }\n  }\n`;\n\nexport default function Post({ data, searchKey = \"\" }: PostType) {\n  const { t } = useTranslation();\n  const { image_cover, title, path, date, type, tags } = data;\n\n  const translatedTags = tags?.map((tag) => t(tag));\n\n  const searchKeyValue = useRecoilValue(inputValueState);\n\n  return (\n    <Layout>\n      <Link to={path}>\n        <div className=\"img_container\">\n          <img alt=\"post_cover\" src={image_cover} className=\"img_cover\" />\n        </div>\n        {tags?.length !== 0 && (\n          <div className=\"post_tags\">\n            {translatedTags?.map((tag) => (\n              <Tag content={transformTextToHighlight(tag, searchKeyValue)} />\n            ))}\n          </div>\n        )}\n        <div className=\"date\">{date.split(\"T\")[0]}</div>\n        <div className=\"post_title\">\n          {transformTextToHighlight(title, searchKeyValue)}\n        </div>\n      </Link>\n    </Layout>\n  );\n}\n","import { postListArticleType } from \"@tool/types\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useTranslation } from \"gatsby-plugin-react-i18next\";\nimport { device } from \"@layouts/styleConfig\";\nimport { MdSearch } from \"react-icons/md\";\nimport { useDebounce } from \"@tool/useDebounce\";\nimport { useSetRecoilState } from \"recoil\";\nimport { inputValueState } from \"@state/index\";\n\nconst Layout = styled.div.withConfig({ componentId: \"PostList_Layout\" })`\n  label {\n    display: grid;\n    grid-template-columns: repeat(1, minmax(0, 1fr));\n\n    div {\n      width: 100%;\n      position: relative;\n      display: flex;\n    }\n\n    input {\n      background-color: transparent;\n      outline: none;\n      border: 1px solid ${({ theme }) => theme.color};\n      border-radius: 4px;\n      color: ${({ theme }) => theme.color};\n      padding: 8px;\n      font-size: 1rem;\n      margin: 1rem 1.5rem;\n      width: 100%;\n    }\n\n    svg {\n      color: ${({ theme }) => theme.color};\n      position: absolute;\n      top: 0;\n      right: 30px;\n      height: 100%;\n      pointer-events: none;\n    }\n  }\n\n  @media ${device.tablet} {\n    label {\n      grid-template-columns: repeat(2, minmax(0, 1fr));\n    }\n  }\n\n  @media ${device.laptop} {\n    label {\n      margin: 0 160px;\n    }\n  }\n`;\n\ntype PostListPropTypes = {\n  articles: postListArticleType[];\n  RenderComponent: any;\n};\n\nexport default function PostList({\n  articles,\n  RenderComponent,\n}: PostListPropTypes) {\n  const { t } = useTranslation();\n\n  const setSearchKeyValue = useSetRecoilState(inputValueState);\n\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const searchKey = useDebounce(inputValue, inputValue.length > 0 ? 200 : 500);\n\n  useEffect(() => {\n    setSearchKeyValue(searchKey);\n  }, [searchKey]);\n\n  const filteredArticles =\n    searchKey === \"\"\n      ? articles\n      : articles.filter((article: postListArticleType) => {\n          return (\n            article.frontmatter.title\n              .toLocaleLowerCase()\n              .includes(searchKey.toLocaleLowerCase()) ||\n            article.frontmatter.tags.some((tag) =>\n              t(`tags:${tag}`).toLocaleLowerCase().includes(searchKey)\n            )\n          );\n        });\n\n  return (\n    <Layout>\n      <label htmlFor=\"\">\n        <div>\n          <input\n            type=\"text\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            placeholder={t(\"tags:filter-tags\")}\n          />\n          <MdSearch />\n        </div>\n      </label>\n      <RenderComponent list={filteredArticles} />\n    </Layout>\n  );\n}\n","import {useState, useEffect} from \"react\"\n\nexport function useDebounce<T> (value:T, delay:number = 500):T {\n  const [ debounceValue, setDebounceValue ] = useState<T>(value)\n\n  useEffect(()=>{\n    const handler = setTimeout(()=>{\n      setDebounceValue(value)\n    },delay)\n\n    return () => {\n      clearTimeout(handler);\n    };\n  },[value, delay])\n\n  return debounceValue\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport Post from \"@components/Post\";\nimport { device } from \"@layouts/styleConfig\";\nimport { MdFrontMatter } from \"@tool/types\";\nimport EmptyPost from \"@components/Post/EmptyPost\";\n\ntype BlogPropTypes = {\n  list: Array<{ frontmatter: MdFrontMatter; fields: { name: string } }>;\n};\n\nconst Layout = styled.div.withConfig({ componentId: \"Blog_Layout\" })`\n  display: grid;\n  grid-template-columns: repeat(4, minmax(0, 1fr));\n\n  @media ${device.tablet} {\n    grid-template-columns: repeat(8, minmax(0, 1fr));\n  }\n\n  @media ${device.laptop} {\n    margin: 0 10rem;\n    grid-template-columns: repeat(12, minmax(0, 1fr));\n  }\n`;\n\nexport default function Blog({ list = [] }: BlogPropTypes) {\n  return (\n    <Layout>\n      {list.length ? (\n        list.map((post, index) => {\n          const path = post.fields.name;\n          const POST_DATA = post.frontmatter;\n          return <Post key={index} data={{ ...POST_DATA, path }} />;\n        })\n      ) : (\n        <EmptyPost />\n      )}\n    </Layout>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { graphql } from \"gatsby\";\nimport Blog from \"@components/page/Blog\";\nimport { SeoContainer } from \"@components/Container/seoContainer\";\nimport { graphqlAllPostType } from \"@tool/types\";\nimport PostList from \"@components/PostList\";\n\ntype BlogListPropTypes = {\n  data: graphqlAllPostType;\n};\n\nconst Layout = styled.main`\n  padding: 32px;\n`;\n\nexport default function BlogList({\n  data, // this prop will be injected by the GraphQL query below.\n}: BlogListPropTypes) {\n  const articles = data.articles.edges.map((v: any) => v.node);\n\n  return <PostList articles={articles} RenderComponent={Blog} />;\n}\n\nexport const pageQuery = graphql`\n  query ($language: String!) {\n    locales: allLocale(filter: { language: { eq: $language } }) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n    articles: allMarkdownRemark(\n      filter: {\n        fields: {\n          sourceInstanceName: { eq: \"blog\" }\n          locale: { eq: $language }\n        }\n      }\n      sort: { order: DESC, fields: frontmatter___date }\n    ) {\n      edges {\n        node {\n          fields {\n            name\n          }\n          frontmatter {\n            title\n            date\n            image_cover\n            type\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\nexport const Head = () => <SeoContainer subtitle=\"blog\" pathname=\"/blog\" />;\n","import { atom } from \"recoil\";\n\nexport const inputValueState = atom({\n  key: \"inputValue\",\n  default: \"\",\n});\n","import React from \"react\";\n\nexport function capitalizeFirstLetter(string: string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function transformTextToHighlight(originText: string, key: string = \"\") {\n  const highlightKey = new RegExp(`(${key})`, \"ig\");\n\n  const tagsList = originText\n    .split(highlightKey)\n    .map((text) =>\n      text.toLocaleLowerCase() === key?.toLocaleLowerCase() ? (\n        <span className=\"highlight\">{text}</span>\n      ) : (\n        text\n      )\n    );\n\n  return tagsList;\n}\n"],"names":["SeoContainer","title","description","pathname","subtitle","children","useStaticQuery","site","siteMetadata","defaultTitle","defaultDescription","seo","url","siteUrl","seoTitle","capitalizeFirstLetter","React","name","content","rel","href","EmptyLayout","styled","componentId","withConfig","device","EmptyPost","t","useTranslation","TagLayout","theme","postColor","Tag","Layout","colors","hoverColor","opacity","hoverOpacity","Post","data","searchKey","image_cover","path","date","tags","type","translatedTags","map","tag","searchKeyValue","useRecoilValue","inputValueState","Link","to","className","alt","src","length","transformTextToHighlight","split","color","PostList","articles","RenderComponent","setSearchKeyValue","useSetRecoilState","useState","inputValue","setInputValue","value","delay","debounceValue","setDebounceValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","filteredArticles","filter","article","frontmatter","toLocaleLowerCase","includes","some","htmlFor","onChange","e","target","placeholder","MdSearch","list","Blog","post","index","fields","POST_DATA","key","displayName","BlogList","edges","v","node","Head","atom","default","string","charAt","toUpperCase","slice","originText","highlightKey","RegExp","text","_key"],"sourceRoot":""}