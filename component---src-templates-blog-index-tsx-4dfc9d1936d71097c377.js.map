{"version":3,"file":"component---src-templates-blog-index-tsx-4dfc9d1936d71097c377.js","mappings":"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","sources":["webpack://Dennnnny.io/./src/components/Container/seoContainer.tsx","webpack://Dennnnny.io/./src/tool/useSiteMetadata.ts","webpack://Dennnnny.io/./src/layouts/mdCss.ts","webpack://Dennnnny.io/./src/components/Comments/index.tsx","webpack://Dennnnny.io/./src/templates/blog/index.tsx","webpack://Dennnnny.io/./src/tool/functions.tsx"],"sourcesContent":["import React from \"react\";\nimport { useSiteMetadata } from \"@tool/useSiteMetadata\";\nimport { capitalizeFirstLetter } from \"@tool/functions\";\n\ntype SeoContainerType = {\n  title?: string;\n  description?: string;\n  pathname?: string;\n  subtitle?: string | null;\n  children?: React.ReactNode;\n};\n\nexport const SeoContainer = ({\n  title,\n  description,\n  pathname,\n  subtitle = null,\n  children,\n}: SeoContainerType) => {\n  const {\n    title: defaultTitle,\n    description: defaultDescription,\n    siteUrl,\n  } = useSiteMetadata();\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    // twitterUsername,\n  };\n\n  const seoTitle = subtitle\n    ? `${seo.title} | ${capitalizeFirstLetter(subtitle)}`\n    : seo.title;\n\n  return (\n    <>\n      <title>{seoTitle}</title>\n      <meta name=\"description\" content={seo.description} />\n      {/* <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:creator\" content={seo.twitterUsername} /> */}\n      <link\n        rel=\"icon\"\n        href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='0.9em' font-size='90'>‚òÄÔ∏è</text></svg>\"\n      />\n      {children}\n    </>\n  );\n};\n","import { graphql, useStaticQuery } from \"gatsby\";\n\nexport const useSiteMetadata = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          siteUrl\n        }\n      }\n    }\n  `);\n\n  return data.site.siteMetadata;\n};\n","import { css } from \"styled-components\";\nimport { colors, device } from \"./styleConfig\";\n\nexport const mdCss = css`\n  > * {\n    margin-top: 24px;\n  }\n\n  line-height: 1.7;\n  font-size: 1.125rem;\n\n  h2 {\n    font-size: 1.5rem;\n    font-weight: 700;\n    position: relative;\n    width: fit-content;\n    z-index: 0;\n    color: ${({ theme }) => theme.titleColor};\n    ::after {\n      content: \"\";\n      width: 100%;\n      height: 30%;\n      position: absolute;\n      bottom: 0px;\n      left: 0px;\n      background-image: linear-gradient(\n        to left,\n        ${colors.gradientPurple},\n        ${colors.gradientRed}\n      );\n      z-index: -1;\n      transform: rotateZ(-1deg);\n    }\n  }\n\n  h3 {\n    font-size: 1.5rem;\n    font-weight: 800;\n    color: ${({ theme }) => theme.titleColor};\n  }\n\n  .separate-line {\n    width: 100%;\n    text-align: center;\n    font-size: 2rem;\n    color: ${({ theme }) => theme.color};\n    letter-spacing: 1rem;\n    margin: 40px 0;\n  }\n\n  p {\n    line-height: 150%;\n  }\n\n  code:not(pre > code) {\n    color: ${colors.codeStyle};\n    display: inline-block;\n    font-family: monospace;\n    overflow-wrap: anywhere;\n  }\n\n  pre {\n    background-color: ${colors.deepBlue};\n    border-radius: 8px;\n    font-size: 1rem;\n    font-weight: 400;\n    line-height: 1.7;\n\n    overflow-x: auto;\n    padding: 1rem 0;\n  }\n\n  details.change_log {\n    > *:not(summary) {\n      white-space: break-spaces;\n      background-color: ${colors.deepBlue};\n      color: ${colors.white};\n      padding: 8px;\n      font-size: 1rem;\n      font-weight: 300;\n    }\n  }\n\n  summary {\n    margin-bottom: 8px;\n  }\n\n  ol {\n    > li {\n      list-style: space-counter;\n      line-height: 150%;\n    }\n  }\n\n  ul {\n    > li:not(.task-list-item) {\n      list-style: square;\n      line-height: 150%;\n    }\n  }\n\n  blockquote {\n    border: none;\n\n    color: ${({ theme }) => theme.color};\n    font-style: italic;\n    font-weight: 400;\n    margin: 2.5rem 0;\n    padding: 0.5rem 1rem;\n\n    overflow-wrap: anywhere;\n    border-left: 3px solid;\n  }\n\n  a {\n    text-decoration: none;\n    color: ${colors.blue};\n    margin: 0 4px;\n\n    :hover {\n      border-bottom: 1px solid ${colors.blue};\n    }\n  }\n\n  @media ${device.tablet} {\n    font-size: 1.25rem;\n\n    h2 {\n      font-size: 1.75rem;\n    }\n  }\n`;\n","import React, { useEffect, useRef } from \"react\";\nimport { useTheme } from \"styled-components\";\n\nexport default function Comments() {\n  const commentsRef = useRef<HTMLDivElement>(null);\n  const theme = useTheme();\n\n  const githubTheme = theme?.type || \"dark\";\n\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.src = \"https://utteranc.es/client.js\";\n    script.setAttribute(\"repo\", \"Dennnnny/dennnnny.github.io.comments\");\n    script.setAttribute(\"issue-term\", \"pathname\");\n    script.setAttribute(\"label\", \"‚ú®üí¨‚ú®\");\n    script.setAttribute(\"theme\", `github-${githubTheme}`);\n    script.setAttribute(\"crossorigin\", \"anonymous\");\n    script.async = true;\n\n    const COMMENT_REF = commentsRef.current;\n\n    if (COMMENT_REF) {\n      COMMENT_REF.appendChild(script);\n    }\n\n    return () => {\n      if (COMMENT_REF) {\n        COMMENT_REF.innerHTML = \"\";\n      }\n    };\n  }, [githubTheme]);\n  return <div ref={commentsRef} />;\n}\n","import React from \"react\";\nimport { graphql, PageProps } from \"gatsby\";\nimport styled from \"styled-components\";\nimport { mdCss } from \"@layouts/mdCss\";\nimport { device } from \"@layouts/styleConfig\";\nimport Comments from \"@components/Comments\";\nimport { SeoContainer } from \"@components/Container/seoContainer\";\nimport { useTranslation } from \"gatsby-plugin-react-i18next\";\n\nconst Layout = styled.div.withConfig({ componentId: \"BlogPost_Layout\" })`\n  display: grid;\n  grid-template-columns: repeat(12, minmax(0, 1fr));\n  padding: 32px;\n  color: ${({ theme }) => theme.color};\n  .post-title {\n    font-size: 32px;\n    font-weight: 800;\n    grid-column-start: 3;\n    grid-column: 1/-1;\n  }\n  .post-date {\n    grid-column: 1/-1;\n    color: ${({ theme }) => theme.postColor};\n    margin-top: 8px;\n  }\n\n  img {\n    grid-column: 1/-1;\n    width: 100%;\n    height: 200px;\n    object-fit: cover;\n    margin-top: 24px;\n    border-radius: 16px;\n  }\n\n  .post-content {\n    grid-column: 1/-1;\n    color: ${({ theme }) => theme.contentColor};\n    background-color: ${({ theme }) => theme.bgColor};\n    backdrop-filter: blur(15px);\n    ${mdCss};\n  }\n\n  .post-comments {\n    border-top: 0.5px solid ${({ theme }) => theme.color};\n    margin-top: 32px;\n    padding-top: 16px;\n    grid-column: 1/-1;\n  }\n\n  .post-image-source {\n    margin-top: 4px;\n    grid-column: 1/-1;\n    font-size: 14px;\n    font-style: italic;\n    color: ${({ theme }) => theme.hintColor};\n    line-height: 150%;\n  }\n\n  @media ${device.tablet} {\n    .post-title {\n      grid-column: 2/-2;\n      font-size: 36px;\n    }\n    .post-date {\n      grid-column: 2/-2;\n    }\n\n    img {\n      grid-column: 2/-2;\n      height: 300px;\n    }\n\n    .post-content {\n      grid-column: 2/-2;\n    }\n\n    .post-comments {\n      margin-top: 64px;\n      padding-top: 32px;\n      grid-column: 2/-2;\n    }\n\n    .post-image-source {\n      grid-column: 2/-2;\n    }\n  }\n\n  @media ${device.laptop} {\n    .post-title {\n      grid-column: 3/-3;\n      font-size: 40px;\n    }\n    .post-date {\n      grid-column: 3/-3;\n    }\n\n    img {\n      grid-column: 3/-3;\n      height: 400px;\n    }\n\n    .post-content {\n      grid-column: 3/-3;\n    }\n\n    .post-comments {\n      grid-column: 3/-3;\n    }\n\n    .post-image-source {\n      grid-column: 3/-3;\n    }\n  }\n`;\n\ntype templatePostType = {\n  blog: {\n    frontmatter: {\n      title: string;\n      date: string;\n      image_cover: string;\n      img_source: string;\n    };\n    html: string;\n  };\n  metadata?: {\n    updatedAt: Date;\n    featured?: boolean;\n  };\n};\n\nexport default ({ data }: PageProps<templatePostType>) => {\n  const {\n    title,\n    date,\n    image_cover,\n    img_source,\n    // tags,\n    // type,\n  } = data.blog.frontmatter;\n  const html = data.blog.html;\n  const { t } = useTranslation();\n  const imgSource = img_source ? img_source : \"unsplash\";\n  return (\n    <Layout>\n      <div className=\"post-title\">{title}</div>\n      <div className=\"post-date\">{date.split(\"T\")[0]}</div>\n      <img src={image_cover} alt={title} />\n      <span className=\"post-image-source\">\n        {t(\"image-source\")} {imgSource}\n      </span>\n      <div\n        className=\"post-content\"\n        dangerouslySetInnerHTML={{ __html: html ?? \"\" }}\n      />\n      <div className=\"post-comments\">\n        <Comments />\n      </div>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query ($language: String!, $name: String!) {\n    locales: allLocale(filter: { language: { eq: $language } }) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n    blog: markdownRemark(\n      fields: {\n        locale: { eq: $language }\n        name: { eq: $name }\n        sourceInstanceName: { eq: \"blog\" }\n      }\n    ) {\n      frontmatter {\n        title\n        date\n        image_cover\n        img_source\n      }\n      html\n    }\n  }\n`;\n\nexport const Head = ({ data }: PageProps<templatePostType>) => {\n  const subtitle = data.blog.frontmatter.title;\n  return <SeoContainer subtitle={subtitle} pathname={`/blog/${subtitle}`} />;\n};\n","import React from \"react\";\n\nexport function capitalizeFirstLetter(string: string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function transformTextToHighlight(originText: string, key: string = \"\") {\n  const highlightKey = new RegExp(`(${key})`, \"ig\");\n\n  const tagsList = originText.split(highlightKey).map((text, index) =>\n    text.toLocaleLowerCase() === key?.toLocaleLowerCase() ? (\n      <span key={index} className=\"highlight\">\n        {text}\n      </span>\n    ) : (\n      text\n    )\n  );\n\n  return tagsList;\n}\n"],"names":["SeoContainer","title","description","pathname","subtitle","children","useStaticQuery","site","siteMetadata","defaultTitle","defaultDescription","seo","url","siteUrl","seoTitle","capitalizeFirstLetter","React","name","content","rel","href","mdCss","css","theme","titleColor","colors","color","device","Comments","commentsRef","useRef","useTheme","githubTheme","type","useEffect","script","document","createElement","src","setAttribute","async","COMMENT_REF","current","appendChild","innerHTML","ref","Layout","styled","componentId","withConfig","displayName","postColor","contentColor","bgColor","hintColor","data","blog","frontmatter","date","image_cover","img_source","html","t","useTranslation","imgSource","className","split","alt","dangerouslySetInnerHTML","__html","Head","string","charAt","toUpperCase","slice","transformTextToHighlight","originText","key","highlightKey","RegExp","map","text","index","toLocaleLowerCase","_key"],"sourceRoot":""}