{"version":3,"file":"component---src-pages-project-tsx-51247f1b2ba6ea73ab25.js","mappings":"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","sources":["webpack://Dennnnny.io/./src/components/Container/seoContainer.tsx","webpack://Dennnnny.io/./src/tool/functions.ts","webpack://Dennnnny.io/./src/tool/useSiteMetadata.ts","webpack://Dennnnny.io/./src/components/Post/EmptyPost.tsx","webpack://Dennnnny.io/./src/components/Post/index.tsx","webpack://Dennnnny.io/./src/components/page/Project/index.tsx","webpack://Dennnnny.io/./src/pages/project.tsx"],"sourcesContent":["import React from \"react\";\nimport { useSiteMetadata } from \"@tool/useSiteMetadata\";\nimport { capitalizeFirstLetter } from \"@tool/functions\";\n\ntype SeoContainerType = {\n  title?: string;\n  description?: string;\n  pathname?: string;\n  subtitle?: string | null;\n  children?: React.ReactNode;\n};\n\nexport const SeoContainer = ({\n  title,\n  description,\n  pathname,\n  subtitle = null,\n  children,\n}: SeoContainerType) => {\n  const {\n    title: defaultTitle,\n    description: defaultDescription,\n    siteUrl,\n  } = useSiteMetadata();\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    // twitterUsername,\n  };\n\n  const seoTitle = subtitle\n    ? `${seo.title} | ${capitalizeFirstLetter(subtitle)}`\n    : seo.title;\n\n  return (\n    <>\n      <title>{seoTitle}</title>\n      <meta name=\"description\" content={seo.description} />\n      {/* <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:creator\" content={seo.twitterUsername} /> */}\n      <link\n        rel=\"icon\"\n        href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='0.9em' font-size='90'>☀️</text></svg>\"\n      />\n      {children}\n    </>\n  );\n};\n","export function capitalizeFirstLetter(string: string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n","import { graphql, useStaticQuery } from \"gatsby\";\n\nexport const useSiteMetadata = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          siteUrl\n        }\n      }\n    }\n  `);\n\n  return data.site.siteMetadata;\n};\n","import { device } from \"@layouts/styleConfig\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { useTranslation } from \"gatsby-plugin-react-i18next\";\n\nconst EmptyLayout = styled.div.withConfig({ componentId: \"EmptyLayout\" })`\n  grid-column: 1/-1;\n  min-height: calc(100vh - 40px - 64px);\n  box-sizing: border-box;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  @media ${device.tablet} {\n    min-height: calc(100vh - 70px - 64px);\n  }\n`;\n\nexport default function EmptyPost() {\n  const { t } = useTranslation();\n  return (\n    <EmptyLayout>\n      <p> {t(\"found-nothing\")}</p>\n    </EmptyLayout>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\nimport { colors, device } from \"@layouts/styleConfig\";\nimport { MdFrontMatter } from \"@tool/types\";\n\ntype PostType = {\n  data: MdFrontMatter;\n};\n\ntype layoutPropType = {\n  [key: string]: string;\n};\n\nconst Layout = styled.div.withConfig({\n  componentId: \"Post_Layout\",\n})`\n  background-color: transparent;\n\n  grid-column: span 4 / span 4;\n  margin: 1rem 1.5rem;\n  padding-bottom: 8px;\n  border-bottom: 1px solid ${colors.lightWhite};\n\n  a {\n    text-decoration: none;\n    /* color: ${colors.white}; */\n    width: 100%;\n    transition: 0.3s;\n\n    :hover {\n      & .date,\n      .post_title {\n        color: ${({ theme }) => theme.hoverColor};\n      }\n    }\n  }\n\n  div.img_container {\n    border-radius: 12px;\n    overflow: hidden;\n    width: 100%;\n    height: 150px;\n  }\n\n  img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    position: relative;\n    transition: 0.3s;\n    opacity: ${({ theme }) => theme.opacity};\n  }\n\n  .date {\n    margin-top: 8px;\n    font-size: 16px;\n    color: ${({ theme }) => theme.postColor};\n    transition: 0.3s;\n  }\n\n  .post_title {\n    margin-top: 4px;\n    font-size: 20px;\n    font-weight: 700;\n    color: ${({ theme }) => theme.postColor};\n    overflow-wrap: break-word;\n    transition: 0.3s;\n  }\n\n  @media ${device.tablet} {\n    padding-bottom: 0;\n    border-bottom: none;\n\n    :hover {\n      img {\n        transform: scale(1.1);\n        opacity: ${({ theme }) => theme.hoverOpacity};\n      }\n    }\n\n    div.img_container {\n      height: 200px;\n    }\n\n    .date {\n      margin-top: 8px;\n      font-size: 18px;\n    }\n\n    .post_title {\n      font-size: 26px;\n    }\n  }\n\n  @media ${device.laptop} {\n    div.img_container {\n      height: 250px;\n    }\n\n    .date {\n      margin-top: 8px;\n      font-size: 20px;\n    }\n\n    .post_title {\n      font-size: 30px;\n    }\n  }\n`;\n\nexport default function Post({ data }: PostType) {\n  const { image_cover, title, path, date, type } = data;\n\n  return (\n    <Layout>\n      <Link to={path}>\n        <div className=\"img_container\">\n          <img alt=\"post_cover\" src={image_cover} className=\"img_cover\" />\n        </div>\n        <div className=\"date\">{date.split(\"T\")[0]}</div>\n        <div className=\"post_title\">{title}</div>\n      </Link>\n    </Layout>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Post from \"@components/Post\";\nimport { device } from \"@layouts/styleConfig\";\nimport { MdFrontMatter } from \"@tool/types\";\nimport EmptyPost from \"@components/Post/EmptyPost\";\n\ntype ProjectPropTypes = {\n  list: Array<{ frontmatter: MdFrontMatter; fields: { name: string } }>;\n};\n\nconst Layout = styled.div.withConfig({ componentId: \"Project_Layout\" })`\n  display: grid;\n  grid-template-columns: repeat(4, minmax(0, 1fr));\n\n  @media ${device.tablet} {\n    grid-template-columns: repeat(8, minmax(0, 1fr));\n  }\n\n  @media ${device.laptop} {\n    margin: 0 10rem;\n    grid-template-columns: repeat(12, minmax(0, 1fr));\n  }\n`;\n\nexport default function Project({ list = [] }: ProjectPropTypes) {\n  return (\n    <Layout>\n      {list.length ? (\n        list.map((post, index) => {\n          const path = post.fields.name;\n          const POST_DATA = post.frontmatter;\n          console.log(123, { path });\n          return <Post key={index} data={{ ...POST_DATA, path }} />;\n        })\n      ) : (\n        <EmptyPost />\n      )}\n    </Layout>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { graphql } from \"gatsby\";\nimport Project from \"@components/page/Project\";\nimport { SeoContainer } from \"@components/Container/seoContainer\";\nimport { graphqlAllPostType } from \"@tool/types\";\n\ntype ProjectListPagePropTypes = {\n  data: graphqlAllPostType;\n};\n\nconst Layout = styled.main`\n  padding: 32px;\n`;\n\nexport default function ProjectsListPage({\n  data, // this prop will be injected by the GraphQL query below.\n}: ProjectListPagePropTypes) {\n  const articles = data.articles.edges.map((v: any) => v.node);\n\n  console.log({ articles });\n  return (\n    <Layout>\n      <Project list={articles} />\n    </Layout>\n  );\n}\nexport const pageQuery = graphql`\n  query ($language: String!) {\n    locales: allLocale(filter: { language: { eq: $language } }) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n    articles: allMarkdownRemark(\n      filter: {\n        fields: {\n          sourceInstanceName: { eq: \"project\" }\n          locale: { eq: $language }\n        }\n      }\n    ) {\n      edges {\n        node {\n          fields {\n            name\n          }\n          frontmatter {\n            title\n            date\n            image_cover\n            type\n          }\n          html\n        }\n      }\n    }\n  }\n`;\n\nexport const Head = () => (\n  <SeoContainer subtitle=\"project\" pathname=\"/project\" />\n);\n"],"names":["SeoContainer","string","title","description","pathname","subtitle","children","useStaticQuery","site","siteMetadata","defaultTitle","defaultDescription","seo","url","siteUrl","seoTitle","charAt","toUpperCase","slice","React","name","content","rel","href","EmptyLayout","styled","componentId","withConfig","device","EmptyPost","t","useTranslation","Layout","colors","theme","hoverColor","opacity","postColor","hoverOpacity","Post","data","image_cover","path","date","type","Link","to","className","alt","src","split","Project","list","length","map","post","index","fields","POST_DATA","frontmatter","console","log","key","displayName","ProjectsListPage","articles","edges","v","node","Head"],"sourceRoot":""}