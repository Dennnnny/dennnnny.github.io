{"version":3,"file":"component---src-pages-change-log-tsx-9aa716da80d8c7251cc3.js","mappings":"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","sources":["webpack://Dennnnny.io/./src/components/Container/seoContainer.tsx","webpack://Dennnnny.io/./src/tool/useSiteMetadata.ts","webpack://Dennnnny.io/./src/layouts/mdCss.ts","webpack://Dennnnny.io/./src/components/page/ChangeLog/index.tsx","webpack://Dennnnny.io/./src/tool/useIntersectionObserver.ts","webpack://Dennnnny.io/./src/pages/change-log.tsx","webpack://Dennnnny.io/./src/tool/functions.tsx"],"sourcesContent":["import React from \"react\";\nimport { useSiteMetadata } from \"@tool/useSiteMetadata\";\nimport { capitalizeFirstLetter } from \"@tool/functions\";\n\ntype SeoContainerType = {\n  title?: string;\n  description?: string;\n  pathname?: string;\n  subtitle?: string | null;\n  children?: React.ReactNode;\n};\n\nexport const SeoContainer = ({\n  title,\n  description,\n  pathname,\n  subtitle = null,\n  children,\n}: SeoContainerType) => {\n  const {\n    title: defaultTitle,\n    description: defaultDescription,\n    siteUrl,\n  } = useSiteMetadata();\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    // twitterUsername,\n  };\n\n  const seoTitle = subtitle\n    ? `${seo.title} | ${capitalizeFirstLetter(subtitle)}`\n    : seo.title;\n\n  return (\n    <>\n      <title>{seoTitle}</title>\n      <meta name=\"description\" content={seo.description} />\n      {/* <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:creator\" content={seo.twitterUsername} /> */}\n      <link\n        rel=\"icon\"\n        href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='0.9em' font-size='90'>☀️</text></svg>\"\n      />\n      {children}\n    </>\n  );\n};\n","import { graphql, useStaticQuery } from \"gatsby\";\n\nexport const useSiteMetadata = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          siteUrl\n        }\n      }\n    }\n  `);\n\n  return data.site.siteMetadata;\n};\n","import { css } from \"styled-components\";\nimport { colors, device } from \"./styleConfig\";\n\nexport const mdCss = css`\n  > *:not(p) {\n    margin-top: 1rem;\n  }\n\n  line-height: 1.7;\n  font-size: 1.125rem;\n  white-space: pre-line;\n\n  h2 {\n    font-size: 1.5rem;\n    font-weight: 700;\n    position: relative;\n    width: fit-content;\n    z-index: 0;\n    color: ${({ theme }) => theme.titleColor};\n    ::after {\n      content: \"\";\n      width: 100%;\n      height: 30%;\n      position: absolute;\n      bottom: 0px;\n      left: 0px;\n      background-image: linear-gradient(\n        to left,\n        ${colors.gradientPurple},\n        ${colors.gradientRed}\n      );\n      z-index: -1;\n      transform: rotateZ(-1deg);\n    }\n  }\n\n  h3 {\n    font-size: 1.5rem;\n    font-weight: 800;\n    color: ${({ theme }) => theme.titleColor};\n  }\n\n  .separate_line {\n    width: 100%;\n    text-align: center;\n    font-size: 2rem;\n    color: ${({ theme }) => theme.color};\n    letter-spacing: 1rem;\n  }\n\n  p {\n    line-height: 150%;\n  }\n\n  code:not(pre > code) {\n    color: ${colors.codeStyle};\n    display: inline-block;\n    font-family: monospace;\n    overflow-wrap: anywhere;\n  }\n\n  pre {\n    background-color: ${colors.deepBlue};\n    border-radius: 8px;\n    font-size: 1rem;\n    font-weight: 400;\n    line-height: 1.7;\n\n    overflow-x: auto;\n    padding: 1rem 0;\n  }\n\n  details {\n    white-space: normal;\n\n    &.change_log {\n      > *:not(summary) {\n        white-space: break-spaces;\n        background-color: ${colors.deepBlue};\n        color: ${colors.white};\n        padding: 8px;\n        font-size: 1rem;\n        font-weight: 300;\n      }\n    }\n  }\n\n  summary {\n    margin-bottom: 8px;\n  }\n\n  ol {\n    > li {\n      list-style: space-counter;\n      line-height: 150%;\n    }\n  }\n\n  ul {\n    > li:not(.task-list-item) {\n      list-style: square;\n      line-height: 150%;\n    }\n  }\n\n  blockquote {\n    border: none;\n\n    color: ${({ theme }) => theme.color};\n    font-style: italic;\n    font-weight: 400;\n    margin: 2.5rem 0;\n    padding: 0.5rem 1rem;\n\n    overflow-wrap: anywhere;\n    border-left: 3px solid;\n  }\n\n  a {\n    text-decoration: none;\n    color: ${colors.blue};\n    margin: 0 4px;\n\n    :hover {\n      border-bottom: 1px solid ${colors.blue};\n    }\n  }\n\n  table {\n    td,\n    th {\n      border: 1px solid ${({ theme }) => theme.color};\n    }\n\n    th {\n      font-weight: 900;\n      padding: 1rem;\n    }\n\n    td {\n      text-align: center;\n      font-size: 1rem;\n      padding: 0.875rem;\n    }\n  }\n\n  strong {\n    font-weight: bolder;\n    text-shadow: 0px 0px;\n  }\n\n  @media ${device.tablet} {\n    font-size: 1.25rem;\n\n    h2 {\n      font-size: 1.75rem;\n    }\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { mdCss } from \"@layouts/mdCss\";\nimport { device } from \"@layouts/styleConfig\";\nimport { useIntersectionObserver } from \"@tool/useIntersectionObserver\";\n\nconst Layout = styled.div.withConfig({ componentId: \"ChangeLog_Layout\" })`\n  padding: 20px 40px 20px 20px;\n  margin-left: 20px;\n  position: relative;\n  div.content {\n    flex: 1;\n    ${mdCss};\n\n    > h1 {\n      margin-top: 0;\n      padding-top: 24px;\n    }\n  }\n\n  div.content > ul > li:nth-child(n) {\n    /* list-style-position: inside; */\n    line-height: 2rem;\n  }\n\n  div.nav_area {\n    display: none;\n  }\n\n  @media ${device.tablet} {\n    padding: 50px 200px;\n    padding-right: 300px;\n    display: flex;\n    flex-direction: row-reverse;\n\n    div.nav_area {\n      display: block; //block;\n      position: sticky;\n      top: 100px;\n      right: 0;\n      margin-left: 40px;\n      height: 100%;\n\n      > .nav_list {\n        height: calc(100vh - 200px);\n        overflow: scroll;\n        width: 150px;\n        position: absolute;\n        border: 1px solid ${({ theme }) => theme.borderColor};\n        padding: 10px;\n        box-sizing: border-box;\n        text-align: center;\n        border-radius: 4px;\n\n        > a {\n          display: block;\n          font-size: 1.5rem;\n          line-height: 150%;\n          text-decoration: none;\n          color: ${({ theme }) => theme.color};\n          font-weight: 400;\n          opacity: 0.5;\n\n          :hover {\n            opacity: 0.8;\n          }\n\n          &.active {\n            font-weight: 900;\n            opacity: 1;\n          }\n        }\n      }\n    }\n  }\n`;\n\ntype ChangeLogType = {\n  content: string;\n  navigationList: string[];\n};\n\nexport default function ChangeLog({ content, navigationList }: ChangeLogType) {\n  const currentNav = useIntersectionObserver();\n\n  return (\n    <Layout>\n      <div className=\"nav_area\">\n        {navigationList.length !== 0 && (\n          <ul className=\"nav_list\">\n            {navigationList.map((item, index) => (\n              <a\n                href={`#${item}`}\n                key={`${item}-${index}`}\n                className={item === currentNav ? \"active\" : \"\"}\n              >\n                {item}\n              </a>\n            ))}\n          </ul>\n        )}\n      </div>\n      <div className=\"content\" dangerouslySetInnerHTML={{ __html: content }} />\n    </Layout>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nexport function useIntersectionObserver() {\n  let [currentNav, setNav] = useState<string>(\"\");\n  useEffect(() => {\n    const changeNav = (\n      entries: IntersectionObserverEntry[],\n      observer: IntersectionObserver\n    ) => {\n      entries.forEach((entry) => {\n        if (entry.boundingClientRect.top <= 30) {\n          var id = entry.target.getAttribute(\"id\") || \"\";\n\n          setNav(id);\n        }\n      });\n    };\n\n    // init the observer\n    const options = {\n      threshold: 1,\n      rootMargin: \"-10px 0px 0px 0px\",\n    };\n\n    const observer = new IntersectionObserver(changeNav, options);\n\n    const sections = document.querySelectorAll(\".content h1\");\n\n    sections.forEach((section) => {\n      observer.observe(section);\n    });\n  }, []);\n\n  return currentNav;\n}\n","import React from \"react\";\nimport ChangeLog from \"@components/page/ChangeLog\";\nimport { SeoContainer } from \"@components/Container/seoContainer\";\nimport { graphql } from \"gatsby\";\n\ntype PageContentType = {\n  data: {\n    article: {\n      edges: {\n        node: {\n          html: string;\n        };\n      }[];\n    };\n  };\n};\n\nconst ChangeLogPage = ({ data }: PageContentType) => {\n  const { html } = data?.article.edges[0].node;\n\n  const navigationList = [...new Set(html.match(/v\\d*\\.\\d*\\.\\d*/g) ?? [\"\"])];\n\n  return <ChangeLog content={html} navigationList={navigationList} />;\n};\n\nexport default ChangeLogPage;\n\nexport const Head = () => (\n  <SeoContainer subtitle=\"change-log\" pathname=\"/change-log\" />\n);\n\nexport const query = graphql`\n  query ($language: String!) {\n    locales: allLocale(filter: { language: { eq: $language } }) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n    article: allMarkdownRemark(\n      sort: { order: DESC, fields: frontmatter___date }\n      filter: {\n        fields: {\n          sourceInstanceName: { eq: \"pages\" }\n          name: { eq: \"change-log\" }\n          locale: { eq: $language }\n        }\n      }\n    ) {\n      edges {\n        node {\n          html\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\n\nexport function capitalizeFirstLetter(string: string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function transformTextToHighlight(originText: string, key: string = \"\") {\n  const highlightKey = new RegExp(`(${key})`, \"ig\");\n\n  const tagsList = originText.split(highlightKey).map((text, index) =>\n    text.toLocaleLowerCase() === key?.toLocaleLowerCase() ? (\n      <span key={index} className=\"highlight\">\n        {text}\n      </span>\n    ) : (\n      text\n    )\n  );\n\n  return tagsList;\n}\n"],"names":["SeoContainer","title","description","pathname","subtitle","children","useStaticQuery","site","siteMetadata","defaultTitle","defaultDescription","seo","url","siteUrl","seoTitle","capitalizeFirstLetter","React","name","content","rel","href","mdCss","css","theme","titleColor","colors","color","device","Layout","styled","componentId","withConfig","borderColor","ChangeLog","navigationList","currentNav","useState","setNav","useEffect","observer","IntersectionObserver","entries","forEach","entry","boundingClientRect","top","id","target","getAttribute","threshold","rootMargin","document","querySelectorAll","section","observe","useIntersectionObserver","className","length","map","item","index","key","dangerouslySetInnerHTML","__html","data","html","article","edges","node","Set","match","Head","string","charAt","toUpperCase","slice","transformTextToHighlight","originText","highlightKey","RegExp","split","text","toLocaleLowerCase","_key"],"sourceRoot":""}