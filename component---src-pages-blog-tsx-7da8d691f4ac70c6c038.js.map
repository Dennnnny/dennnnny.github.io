{"version":3,"file":"component---src-pages-blog-tsx-7da8d691f4ac70c6c038.js","mappings":"uKAYO,IAAMA,EAAe,SAAC,GAMJ,IClBaC,EDapCC,EAKsB,EALtBA,MACAC,EAIsB,EAJtBA,YACAC,EAGsB,EAHtBA,SAGsB,IAFtBC,SAAAA,OAEsB,MAFX,KAEW,EADtBC,EACsB,EADtBA,SAEA,GEhBaC,EAAAA,EAAAA,IAAe,cAYhBC,KAAKC,aFKRC,EADT,EACER,MACaS,EAFf,EAEER,YAIIS,EAAM,CACVV,MAAOA,GAASQ,EAChBP,YAAaA,GAAeQ,EAC5BE,IAAI,GATN,EAGEC,SAMkBV,GAAQ,KAItBW,EAAWV,EACVO,EAAIV,MADc,MChCWD,EDiCMI,GChC5BW,OAAO,GAAGC,cAAgBhB,EAAOiB,MAAM,IDiCjDN,EAAIV,MAER,OACEiB,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAAA,QAAAA,KAAQJ,GACRI,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,cAAcC,QAAST,EAAIT,cAOtCgB,EAAAA,cAAAA,OAAAA,CACEG,IAAI,OACJC,KAAK,oIAENjB,EAtCA,C,mGGMDkB,EAASC,EAAAA,QAAAA,IAAAA,WAAsB,CACnCC,YAAa,gBADHC,WAAA,wDAAGF,CAAH,wvBAQiBG,EAAAA,GAAAA,YAWZ,qBAAGC,MAAkBC,UAnB1B,IAoCC,qBAAGD,MAAkBE,SApCtB,IA4CC,qBAAGF,MAAkBE,SA5CtB,GAiDDC,EAAAA,GAAAA,QAMQ,kCAAGC,YAvDV,GA0EDD,EAAAA,GAAAA,QAgBI,SAASE,EAAT,GAAmC,IAAnBC,EAAkB,EAAlBA,KACrBC,EAAyCD,EAAzCC,YAAalC,EAA4BiC,EAA5BjC,MAAOmC,EAAqBF,EAArBE,KAAMC,EAAeH,EAAfG,KAAMC,EAASJ,EAATI,KAElCC,EAAqC,CACzCC,KAAMb,EAAAA,GAAAA,IACNc,QAASd,EAAAA,GAAAA,MAGX,OACET,EAAAA,cAACK,EAAD,CAAQS,aAAcO,EAAmBD,IAAS,SAChDpB,EAAAA,cAACwB,EAAAA,GAAD,CAAMC,GAAIP,GACRlB,EAAAA,cAAAA,MAAAA,CAAK0B,IAAI,aAAaC,IAAKV,EAAaW,UAAU,cAClD5B,EAAAA,cAAAA,MAAAA,CAAK4B,UAAU,QAAQT,EAAKU,MAAM,KAAK,IACvC7B,EAAAA,cAAAA,MAAAA,CAAK4B,UAAU,cAAc7C,IAIpC,C,0ICnHKsB,EAASC,EAAAA,QAAAA,IAAAA,WAAsB,CAAEC,YAAa,gBAAxCC,WAAA,wDAAGF,CAAH,oMAIDO,EAAAA,GAAAA,OAIAA,EAAAA,GAAAA,QAMI,SAASiB,EAAT,GAA6C,IAAD,IAA5BC,KAAAA,OAA4B,MAArB,GAAqB,EACzD,OACE/B,EAAAA,cAACK,EAAD,KACG0B,EAAKC,KAAI,SAACC,EAAMC,GACf,IAAMC,EAAYF,EAAKG,YACvB,OAAOpC,EAAAA,cAACe,EAAAA,EAAD,CAAMsB,IAAKH,EAAOlB,KAAMmB,GAFhC,IAMN,C,cCtBK9B,EAASC,EAAAA,QAAAA,KAAAA,WAAH,CAAAgC,YAAAA,eAAA/B,YAAAA,eAAGD,CAAH,mBAIG,SAASiC,EAAT,GAEO,IAGlBC,EAHkB,EADpBxB,KAEQyB,kBAEND,MAIF,OACExC,EAAAA,cAACK,EAAD,KACEL,EAAAA,cAAC8B,EAAD,CAAMC,KAAMS,IAGjB,CACM,IAmBME,EAAO,kBAAM1C,EAAAA,cAACnB,EAAAA,EAAD,CAAcK,SAAS,OAAOD,SAAS,SAA1D,C","sources":["webpack://Dennnnny.io/./src/components/Container/seoContainer.tsx","webpack://Dennnnny.io/./src/tool/functions.ts","webpack://Dennnnny.io/./src/tool/useSiteMetadata.ts","webpack://Dennnnny.io/./src/components/Post/index.tsx","webpack://Dennnnny.io/./src/components/page/Blog/index.tsx","webpack://Dennnnny.io/./src/pages/blog.tsx"],"sourcesContent":["import React from \"react\";\nimport { useSiteMetadata } from \"@tool/useSiteMetadata\";\nimport { capitalizeFirstLetter } from \"@tool/functions\";\n\ntype SeoContainerType = {\n  title?: string;\n  description?: string;\n  pathname?: string;\n  subtitle?: string | null;\n  children?: React.ReactNode;\n};\n\nexport const SeoContainer = ({\n  title,\n  description,\n  pathname,\n  subtitle = null,\n  children,\n}: SeoContainerType) => {\n  const {\n    title: defaultTitle,\n    description: defaultDescription,\n    siteUrl,\n  } = useSiteMetadata();\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    // twitterUsername,\n  };\n\n  const seoTitle = subtitle\n    ? `${seo.title}|${capitalizeFirstLetter(subtitle)}`\n    : seo.title;\n\n  return (\n    <>\n      <title>{seoTitle}</title>\n      <meta name=\"description\" content={seo.description} />\n      {/* <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:creator\" content={seo.twitterUsername} /> */}\n      <link\n        rel=\"icon\"\n        href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='0.9em' font-size='90'>☀️</text></svg>\"\n      />\n      {children}\n    </>\n  );\n};\n","export function capitalizeFirstLetter(string: string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n","import { graphql, useStaticQuery } from \"gatsby\";\n\nexport const useSiteMetadata = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          siteUrl\n        }\n      }\n    }\n  `);\n\n  return data.site.siteMetadata;\n};\n","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\nimport { colors, device } from \"@layouts/styleConfig\";\nimport { MdFrontMatter } from \"@tool/types\";\n\ntype LayoutType = {\n  outlineColor: string;\n};\n\ntype PostType = {\n  data: MdFrontMatter;\n};\n\ntype layoutPropType = {\n  [key: string]: string;\n};\n\nconst Layout = styled.div.withConfig({\n  componentId: \"Post_Layout\",\n})<LayoutType>`\n  background-color: transparent;\n\n  grid-column: span 4 / span 4;\n  margin: 1rem 1.5rem;\n  padding-bottom: 8px;\n  border-bottom: 1px solid ${colors.lightWhite};\n\n  a {\n    text-decoration: none;\n    /* color: ${colors.white}; */\n    width: 100%;\n    transition: 0.3s;\n\n    :hover {\n      & .date,\n      .post_title {\n        color: ${({ theme }) => theme.hoverColor};\n      }\n    }\n  }\n\n  img {\n    border-radius: 12px;\n    width: 100%;\n    height: 150px;\n    object-fit: cover;\n    position: relative;\n    transition: 0.3s;\n  }\n\n  .date {\n    margin-top: 8px;\n    font-size: 16px;\n    color: ${({ theme }) => theme.postColor};\n    transition: 0.3s;\n  }\n\n  .post_title {\n    margin-top: 4px;\n    font-size: 20px;\n    font-weight: 700;\n    color: ${({ theme }) => theme.postColor};\n    overflow-wrap: break-word;\n    transition: 0.3s;\n  }\n\n  @media ${device.tablet} {\n    padding-bottom: 0;\n    border-bottom: none;\n\n    :hover {\n      img {\n        outline: ${({ outlineColor }) => `2px solid  ${outlineColor}`};\n        outline-offset: 2px;\n      }\n    }\n\n    img {\n      height: 200px;\n    }\n\n    .date {\n      margin-top: 8px;\n      font-size: 18px;\n    }\n\n    .post_title {\n      font-size: 26px;\n    }\n  }\n\n  @media ${device.laptop} {\n    img {\n      height: 250px;\n    }\n\n    .date {\n      margin-top: 8px;\n      font-size: 20px;\n    }\n\n    .post_title {\n      font-size: 30px;\n    }\n  }\n`;\n\nexport default function Post({ data }: PostType) {\n  const { image_cover, title, path, date, type } = data;\n\n  const outlineColorConfig: layoutPropType = {\n    blog: colors.red,\n    project: colors.blue,\n  };\n\n  return (\n    <Layout outlineColor={outlineColorConfig[type] || \"white\"}>\n      <Link to={path}>\n        <img alt=\"post_cover\" src={image_cover} className=\"img_cover\" />\n        <div className=\"date\">{date.split(\"T\")[0]}</div>\n        <div className=\"post_title\">{title}</div>\n      </Link>\n    </Layout>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Post from \"@components/Post\";\nimport { device } from \"@layouts/styleConfig\";\nimport { MdFrontMatter } from \"@tool/types\";\n\ntype BlogPropTypes = {\n  list: Array<{ frontmatter: MdFrontMatter }>;\n};\n\nconst Layout = styled.div.withConfig({ componentId: \"Blog_Layout\" })`\n  display: grid;\n  grid-template-columns: repeat(4, minmax(0, 1fr));\n\n  @media ${device.tablet} {\n    grid-template-columns: repeat(8, minmax(0, 1fr));\n  }\n\n  @media ${device.laptop} {\n    margin: 0 10rem;\n    grid-template-columns: repeat(12, minmax(0, 1fr));\n  }\n`;\n\nexport default function Blog({ list = [] }: BlogPropTypes) {\n  return (\n    <Layout>\n      {list.map((post, index) => {\n        const POST_DATA = post.frontmatter;\n        return <Post key={index} data={POST_DATA} />;\n      })}\n    </Layout>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { graphql } from \"gatsby\";\nimport Blog from \"@components/page/Blog\";\nimport { SeoContainer } from \"@components/Container/seoContainer\";\nimport { graphqlAllPostType } from \"@tool/types\";\n\ntype BlogListPropTypes = {\n  data: graphqlAllPostType;\n};\n\nconst Layout = styled.main`\n  padding: 32px;\n`;\n\nexport default function BlogList({\n  data, // this prop will be injected by the GraphQL query below.\n}: BlogListPropTypes) {\n  const { allMarkdownRemark } = data; // data.allMarkdownRemark holds your post data\n  const {\n    nodes,\n    // totalCount\n  } = allMarkdownRemark;\n\n  return (\n    <Layout>\n      <Blog list={nodes} />\n    </Layout>\n  );\n}\nexport const pageQuery = graphql`\n  query MyBlogQuery {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: frontmatter___date }\n      filter: { frontmatter: { path: { regex: \"/blog/\" } } }\n    ) {\n      totalCount\n      nodes {\n        frontmatter {\n          path\n          title\n          date\n          image_cover\n          type\n        }\n      }\n    }\n  }\n`;\nexport const Head = () => <SeoContainer subtitle=\"blog\" pathname=\"/blog\" />;\n"],"names":["SeoContainer","string","title","description","pathname","subtitle","children","useStaticQuery","site","siteMetadata","defaultTitle","defaultDescription","seo","url","siteUrl","seoTitle","charAt","toUpperCase","slice","React","name","content","rel","href","Layout","styled","componentId","withConfig","colors","theme","hoverColor","postColor","device","outlineColor","Post","data","image_cover","path","date","type","outlineColorConfig","blog","project","Link","to","alt","src","className","split","Blog","list","map","post","index","POST_DATA","frontmatter","key","displayName","BlogList","nodes","allMarkdownRemark","Head"],"sourceRoot":""}